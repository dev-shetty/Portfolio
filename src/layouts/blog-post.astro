---
import MainLayout from "./main-layout.astro";
import { formatDate } from "@/lib/helpers";
import H1 from "@/components/ui/typography/H1.astro";
import { Icon } from "astro-icon/components";
import SeriesList from "../components/blog/series-list";
import { getCollection } from "astro:content";

const {
  title,
  description,
  date,
  tags,
  coverImage,
  slug,
  originalPost,
  series,
} = Astro.props;

// Get all posts in the same series
let seriesPosts = [];
if (series) {
  const allPosts = await getCollection("blog");
  seriesPosts = allPosts
    .filter((post) => post.data.series?.name === series.name)
    .sort((a, b) => a.data.series.order - b.data.series.order);
}

---

<MainLayout
  title={`${title} | Blog | Deveesh Shetty`}
  description={description}
  ogImage={coverImage}
>
  <article class="max-w-3xl mx-auto my-16">
    <a
      href="/blog"
      class="inline-flex items-center gap-2 text-gray-400 hover:text-gray-200 mb-8 group transition-colors"
    >
      <Icon
        name="lucide:arrow-left"
        class="w-4 h-4 transition-transform group-hover:-translate-x-1"
      />
      Back to Blogs
    </a>

    {seriesPosts.length > 1 && (
      <div class="my-8 p-4 bg-gray-900/50 rounded-lg">
        <h3 class="text-lg font-medium mb-4">Series: {series.name}</h3>
        <SeriesList client:load posts={seriesPosts} currentSlug={slug} />
      </div>
    )}

    <header class="space-y-8">
      {
        coverImage && (
          <img
            src={coverImage}
            alt={title}
            class="w-full aspect-video object-cover rounded-lg outline outline-gray-700"
            transition:name={`blog-image-${slug}`}
          />
        )
      }
      <div class="space-y-4">
        <H1 transition:name={`blog-title-${slug}`} className="leading-tight"
          >{title}</H1
        >
        <div class="flex flex-wrap items-center gap-4 text-gray-400">
          <time datetime={date?.toISOString()}>{formatDate(date)}</time>
          <div class="flex flex-wrap gap-2 mt-2">
            {
              tags?.map((tag: string) => (
                <span class="bg-[#23262f] hover:bg-gray-800 px-3 py-1 rounded-lg text-sm">
                  {tag}
                </span>
              ))
            }
          </div>
        </div>
      </div>
    </header>

    <div class="prose prose-invert max-w-none mt-12">
      <slot />
    </div>

    {
      originalPost && (
        <div class="mt-12 pt-8 border-t border-gray-700">
          <a
            href={originalPost.url}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-2 text-blue-400 hover:text-blue-300"
          >
            <span>Originally posted on {originalPost.platform}</span>
            <Icon name="lucide:external-link" class="w-4 h-4" />
          </a>
        </div>
      )
    }
  </article>
</MainLayout>
